import { Modal } from './modal.js';
import { cartStore } from '../stores/cartStore.js';
import { salesService } from '../services/salesService.js';
import { ProgressBar } from './progressBar.js';
import { NotificationSystem } from './notification.js';

const checkoutModal = (() => {
  let modalInstance = null;

  const renderCartItems = () => {
    const items = cartStore.getItems();
    console.log('üõí Rendering cart items:', items);
    
    if (items.length === 0) return '<p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</p>';

    return `
      <div class="cart-items">
        ${items.map(item => `
          <div class="cart-item-row">
            <span>${item.product.name} (x${item.quantity})</span>
   
           <span>${(item.selectedPrice * item.quantity).toFixed(2)} ‡∏ø</span>
          </div>
        `).join('')}
      </div>
      <div class="total-row">
        <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</span>
        <strong id="total-amount">${cartStore.getTotal().toFixed(2)} ‡∏ø</strong>
      </div>
      <div class="payment-method-toggle">
        <button class="btn-toggle" data-method="cash">‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î</button>
        <button class="btn-toggle" data-method="transfer">‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</button>
      
      </div>
      <div class="cash-input hidden">
        <label>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏≤</label>
        <input type="number" id="cash-input" placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô">
        <p class="change-output" id="change-output">‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: 0.00 ‡∏ø</p>
      </div>
    `;
  };

  const attachEvents = () => {
    console.log('üîó Attaching checkout modal events');
    
    const toggleButtons = document.querySelectorAll('.btn-toggle');
    console.log('üéõÔ∏è Found toggle buttons:', toggleButtons.length);
    
    toggleButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        console.log('üí≥ Payment method selected:', btn.dataset.method);
        toggleButtons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        const method = btn.dataset.method;
        const cashInput = document.querySelector('.cash-input');
        if (cashInput) {
          cashInput.classList.toggle('hidden', method !== 'cash');
        }
 
      });
    });

    const cashInput = document.getElementById('cash-input');
    if (cashInput) {
      cashInput.addEventListener('input', () => {
        const value = parseFloat(cashInput.value);
        const total = cartStore.getTotal();
        const change = !isNaN(value) && value >= total ? (value - total) : 0;
        const changeOutput = document.getElementById('change-output');
        if (changeOutput) {
          changeOutput.textContent = `‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: ${change.toFixed(2)} ‡∏ø`;
        }
   
       });
    }

    const confirmBtn = document.getElementById('confirm-checkout');
    if (confirmBtn) {
      confirmBtn.addEventListener('click', async () => {
        console.log('‚úÖ Confirm checkout clicked');
        
        const selectedMethodEl = document.querySelector('.btn-toggle.active');
        if (!selectedMethodEl) {
          NotificationSystem.warning(
            '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
            '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠'
          );
    
          return;
        }
        
        const paymentMethod = selectedMethodEl.dataset.method;
        console.log('üí∞ Processing payment with method:', paymentMethod);
        
        // ===============================================
        //  ‚úÖ  ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß  ‚úÖ 
        // ===============================================
        
        confirmBtn.disabled = true;
        confirmBtn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...';

        try {
          const [_, result] = await Promise.all([
            ProgressBar.show('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢...'),
            salesService.createSale(cartStore.getItems(), paymentMethod)
          ]);
          console.log('üìä Sale result:', result);
          
          if (result.success) {
            console.log('‚úÖ Sale successful, clearing cart');
            cartStore.clearCart();
            modalInstance?.close();
            
            // Show beautiful success notification
            NotificationSystem.success(
              'üéâ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
              `‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${result.data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
            );
          } else {
            console.error('‚ùå Sale failed:', result.error);
            NotificationSystem.error(
              '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
              result.error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ'
            );
            confirmBtn.disabled = false;
            confirmBtn.textContent = '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô';
          }
        } catch (error) {
          console.error('üí• Sale error:', error);
          NotificationSystem.error(
            '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            error.message || '‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          );
          confirmBtn.disabled = false;
          confirmBtn.textContent = '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô';
        }
      });
    }

    const clearCartBtn = document.getElementById('clear-cart-btn');
    if (clearCartBtn) {
      clearCartBtn.addEventListener('click', async () => {
        console.log('üóëÔ∏è Clear cart clicked');
        
        const confirmed = await NotificationSystem.confirm({
          title: 'üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
          message: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
          confirmText: '‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤',
          cancelText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
    
          type: 'warning'
        });
        
        if (confirmed) {
          cartStore.clearCart();
          modalInstance?.close();
          NotificationSystem.info(
            'üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß',
            '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
          );
  
        }
      });
    }

    const cancelBtn = document.getElementById('cancel-checkout');
    if (cancelBtn) {
      cancelBtn.addEventListener('click', () => {
        console.log('‚ùå Checkout cancelled');
        modalInstance?.close();
      });
    }
  };

  const open = () => {
    console.log('üõí Opening checkout modal');
    
    const items = cartStore.getItems();
    if (items.length === 0) {
      NotificationSystem.warning(
        '‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á',
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'
      );
      return;
    }

    modalInstance = Modal.create({
      title: '‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
      body: renderCartItems(),
      footer: `
        <button class="btn btn-clear" id="clear-cart-btn">‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</button>
        <button class="btn btn-confirm" id="confirm-checkout">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</button>
        <button class="btn btn-cancel" id="cancel-checkout">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
      `
    });
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ modal ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° event listeners
    setTimeout(() => attachEvents(), 100);
  };

  return { open };
})();
export { checkoutModal };
